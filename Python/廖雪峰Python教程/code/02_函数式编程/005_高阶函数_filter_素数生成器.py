# 计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：
# 首先，列出从`2`开始的所有自然数，构造一个序列：
# 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...
#
# 取序列的第一个数`2`，它一定是素数，然后用`2`把序列的`2`的倍数筛掉：
# 3, ~~4~~, 5, ~~6~~, 7, ~~8~~, 9, ~~10~~, 11, ~~12~~, 13, ~~14~~, 15, ~~16~~, 17, ~~18~~, 19, ~~20~~, ...
#
# 取新序列的第一个数`3`，它一定是素数，然后用`3`把序列的`3`的倍数筛掉：
# 5, ~~6~~, 7, ~~8~~, ~~9~~, ~~10~~, 11, ~~12~~, 13, ~~14~~, ~~15~~, ~~16~~, 17, ~~18~~, 19, ~~20~~, ...
#
# 取新序列的第一个数`5`，然后用`5`把序列的`5`的倍数筛掉：
# 7, ~~8~~, ~~9~~, ~~10~~, 11, ~~12~~, 13, ~~14~~, ~~15~~, ~~16~~, 17, ~~18~~, 19, ~~20~~, ...
#
# 不断筛下去，就可以得到所有的素数。

# 生成奇数的生成器
def odd_iter():
    n = 1
    while True:
        n += 2
        yield n


# 返回一个lambda函数，是否能被整除
def not_divisible(n):
    return lambda x: x % n > 0


def primes_generator():
    yield 2  # 2是第一个素数
    it = odd_iter()

    while True:
        pri = next(it)
        yield pri
        it = filter(not_divisible(pri), it)


if __name__ == "__main__":
    for prime in primes_generator():
        if prime < 100:
            print(prime)
        else:
            break
